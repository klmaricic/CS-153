
*** These modified files were found in JOE when it aborted on Thu Apr  5 22:04:26 2012
*** JOE was aborted because the terminal closed

*** File '(Unnamed)'
test_stack.cpp
test_stack.cpp
test_stack.cpp
test_summaries.txt
test_stack.cpp
test_stack.cpp
test_stack.cpp
linkedList.h
linkedList.h
linkedList.hpp
binaryTree.h

*** These modified files were found in JOE when it aborted on Thu Apr  5 22:05:24 2012
*** JOE was aborted because the terminal closed

*** File '(Unnamed)'
test_stack.cpp
test_stack.cpp
test_stack.cpp
test_summaries.txt
test_stack.cpp
test_stack.cpp
test_stack.cpp
linkedList.h
linkedList.h
linkedList.hpp
bst.hpp
bst.hpp

*** These modified files were found in JOE when it aborted on Thu Apr  5 22:40:40 2012
*** JOE was aborted because the terminal closed

*** File '(Unnamed)'
test_stack.cpp
test_stack.cpp
test_stack.cpp
test_summaries.txt
test_stack.cpp
test_stack.cpp
test_stack.cpp
linkedList.h
linkedList.h
linkedList.hpp
bst.h

*** These modified files were found in JOE when it aborted on Thu Apr  5 22:42:25 2012
*** JOE was aborted because the terminal closed

*** File 'bst.hpp'
//Kelsey Maricic
//bst.hpp

template<class T>
bool BST<T>:: find(const T& x) const
{
  return(findStartingAtNode(x, BinaryTree<T>:: m_root));
}

template<class T>
bool BST<T>:: findStartingAtNode(const T& x, BNode<T>* nodePtr) const
{
  if(nodePtr == NULL)
    return false;
  if(nodePtr->m_data == x)
    return true;
  if(x < nodePtr->m_data)
    return(findStartingAtNode(x, nodePtr->m_left));
  else
    return(findStartingAtNode(x, nodePtr->m_right)); 
}

template<class T>
void BST<T>:: insert(const T& x)
{
  insertStartingAtNode(x, BinaryTree<T>::m_root);
}

template<class T>
void BST<T>:: insertStartingAtNode(const T& x, BNode<T>*& nodePtr)
{
  if(nodePtr == NULL)
  {
    nodePtr = new BNode<T>(x, NULL, NULL);
    BinaryTree<T>::m_size++;
  }
  else
  {
    if(x < noedPtr->m_data)
      insertStartingAtNode(x, nodePtr->m_left);
    else if(x > noePtr->m_data)
      insertStartingAtNode(x, nodePtr->m_right);
  }
}

bool operator==(const BST<T>& rhs)const
{
  return(toStringPreorder() == rhs.toStringPreorder()) &&
}

*** File '(Unnamed)'
test_stack.cpp
test_stack.cpp
test_stack.cpp
test_summaries.txt
test_stack.cpp
test_stack.cpp
test_stack.cpp
linkedList.h
linkedList.h
linkedList.hpp
bst.hpp
bst.hpp
bst.hpp
bst.hpp
bst.hpp
bst.hpp
bst.hpp
bst.hpp
bst.hpp

*** These modified files were found in JOE when it aborted on Thu Apr  5 23:36:50 2012
*** JOE was aborted because the terminal closed

*** File '(Unnamed)'
test_stack.cpp
test_stack.cpp
test_stack.cpp
test_summaries.txt
test_stack.cpp
test_stack.cpp
test_stack.cpp
linkedList.h
linkedList.h
linkedList.hpp
bst.hpp
bst.hpp
bst.hpp
bst.hpp
bst.hpp
bst.hpp
bst.hpp
bst.hpp
bst.hpp
bst.hpp
bst.hpp

*** These modified files were found in JOE when it aborted on Thu Apr  5 23:37:39 2012
*** JOE was aborted because the terminal closed

*** File '(Unnamed)'
test_stack.cpp
test_stack.cpp
test_stack.cpp
test_summaries.txt
test_stack.cpp
test_stack.cpp
test_stack.cpp
linkedList.h
linkedList.h
linkedList.hpp
bst.h
bst.h
bst.h
bst.h
